// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package rkpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RadarClient is the client API for Radar service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RadarClient interface {
	StreamPlayerPositions(ctx context.Context, opts ...grpc.CallOption) (Radar_StreamPlayerPositionsClient, error)
}

type radarClient struct {
	cc grpc.ClientConnInterface
}

func NewRadarClient(cc grpc.ClientConnInterface) RadarClient {
	return &radarClient{cc}
}

func (c *radarClient) StreamPlayerPositions(ctx context.Context, opts ...grpc.CallOption) (Radar_StreamPlayerPositionsClient, error) {
	stream, err := c.cc.NewStream(ctx, &Radar_ServiceDesc.Streams[0], "/rkpb.Radar/StreamPlayerPositions", opts...)
	if err != nil {
		return nil, err
	}
	x := &radarStreamPlayerPositionsClient{stream}
	return x, nil
}

type Radar_StreamPlayerPositionsClient interface {
	Send(*PlayerPositions) error
	Recv() (*Response, error)
	grpc.ClientStream
}

type radarStreamPlayerPositionsClient struct {
	grpc.ClientStream
}

func (x *radarStreamPlayerPositionsClient) Send(m *PlayerPositions) error {
	return x.ClientStream.SendMsg(m)
}

func (x *radarStreamPlayerPositionsClient) Recv() (*Response, error) {
	m := new(Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// RadarServer is the server API for Radar service.
// All implementations must embed UnimplementedRadarServer
// for forward compatibility
type RadarServer interface {
	StreamPlayerPositions(Radar_StreamPlayerPositionsServer) error
	mustEmbedUnimplementedRadarServer()
}

// UnimplementedRadarServer must be embedded to have forward compatible implementations.
type UnimplementedRadarServer struct {
}

func (UnimplementedRadarServer) StreamPlayerPositions(Radar_StreamPlayerPositionsServer) error {
	return status.Errorf(codes.Unimplemented, "method StreamPlayerPositions not implemented")
}
func (UnimplementedRadarServer) mustEmbedUnimplementedRadarServer() {}

// UnsafeRadarServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RadarServer will
// result in compilation errors.
type UnsafeRadarServer interface {
	mustEmbedUnimplementedRadarServer()
}

func RegisterRadarServer(s grpc.ServiceRegistrar, srv RadarServer) {
	s.RegisterService(&Radar_ServiceDesc, srv)
}

func _Radar_StreamPlayerPositions_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(RadarServer).StreamPlayerPositions(&radarStreamPlayerPositionsServer{stream})
}

type Radar_StreamPlayerPositionsServer interface {
	Send(*Response) error
	Recv() (*PlayerPositions, error)
	grpc.ServerStream
}

type radarStreamPlayerPositionsServer struct {
	grpc.ServerStream
}

func (x *radarStreamPlayerPositionsServer) Send(m *Response) error {
	return x.ServerStream.SendMsg(m)
}

func (x *radarStreamPlayerPositionsServer) Recv() (*PlayerPositions, error) {
	m := new(PlayerPositions)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Radar_ServiceDesc is the grpc.ServiceDesc for Radar service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Radar_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "rkpb.Radar",
	HandlerType: (*RadarServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamPlayerPositions",
			Handler:       _Radar_StreamPlayerPositions_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "rkpb.proto",
}
